<?php
/**
 * Hanldes assignment of template variables and generation of output upon call by the controller.
 * 
 * @package core
 */
namespace component;
class View
{	
	/**
	 * Holds all variable assignments supplied to the template. 
	 * These are set/fetched/destroyed via the magical methods built in
	 * with PHP classes.
	 */
	protected $_data = array();
	
	/**
	 * Maintains global variables assigned from any namespace and applied to all templates.
	 * These are applied before template variables, so they may be overloaded via $this->$_data
	 * on a per-view basis.
	 */
	public static $globals = array();
	
	/**
	 * Template to be loaded and output
	 */
	protected $template;
	
	/**
	 * Constructor.
	 * Brings supplied template into local member where it will await
	 * a call to display_content.
	 *
	 * @param $template
	 */
	public function __construct($template)
	{
		$this->template = $template;
	}
	
	/**
	 * Assigns any template variable to $this->data array
	 * 
	 * @param mixed $name
	 * @param mixed $value
	 */
	public function __set($name, $value)
	{
		$this->_data[$name] = $value;
	}
	
	/**
	 * Set a global variable to be applied to all templates.
	 * Globals may also be set directly via self::$globals.
	 * 
	 * @param
	 * @return
	 */
	public static function set_global($name, $value)
	{
		self::$globals[$name] = $value;
	}
	
	/**
	 * Fetches value of supplied template variable from $this->data 
	 * array
	 * 
	 * @param $name
	 * @return mixed
	 */
	public function __get($name)
	{
		if (isset($this->_data[$name]))
		{
			return $this->_data[$name];
		}
	}
	
	/**
	 * Returns whether specified template variable has a value
	 *
	 * @param $name
	 * @return bool
	 */
	public function __isset($name)
	{
		return (bool) array_key_exists($name, $this->_data);
	}
	
	public function __unset($name)
	{
		unset($this->_data[$name]);
	}
	
	/**
	 * Load set template.
	 * 
	 * @return string File resource
	 * @throws \Exception 
	 */
	private function loadTemplate()
	{		
		$file = \Loader::search('template' . DIRECTORY_SEPARATOR . $this->template);		
		if ( ! $file) throw new \Exception ('Invalid template name: ' . $this->template);
		
		return $file;
	}
	
	/**
	 * Generates template output.
	 * Extracts $this->_data into local namespace so that it can be
	 * interpolated into the output generated by template.
	 *
	 * @return bool
	 * @throws \Exception
	 */
	public function display()
	{
		// We need to fetch file manually to allow local variable namespace.
		$file = $this->loadTemplate();			
		
		// Get global and template variables into local namespace.
		extract(self::$globals);
		extract($this->_data);
		
		require $file;
		return TRUE;
	}
	
	/**
	 * Returns template output so that it may be assigned to a variable
	 * rather than displayed directly. This is useful when you want to
	 * embed template content inside another template.
	 *
	 * @return string
	 */
	public function fetch()
	{		
		ob_start();		
		$this->display();
		$content = ob_get_clean();
		return $content;
	}
}
